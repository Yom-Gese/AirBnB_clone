#!/usr/bin/python3
"""Defines a class FileStorage that
serializes instances to a JSON file and deserializes JSON file to instances"""
import json
from models.base_model import BaseModel


class FileStorage():
    """serializes instances to a JSON file and
    deserializes JSON file to instances"""

    __file_path = "filestorage.json"
    __objects = {}

    def __init__(self):
        """Initializes a FileStorage instance"""
        pass

    def all(self):
        """returns the dictionary __objects"""

        return FileStorage.__objects

    def new(self, obj):
        """sets in __objects the obj with key <obj class name>.id"""

        FileStorage.__objects[f"{type(obj).__name__}.{obj.id}"] = obj

    def save(self):
        """serializes __objects to the JSON file (path: __file_path)"""

        store = {}

        for key, value in FileStorage.__objects.items():
            if type(value) is not dict:
                store[key] = value.to_dict()
            else:
                store[key] = value
        with open(FileStorage.__file_path, 'w') as f:
            json.dump(store, f)

    def reload(self):
        """deserializes the JSON file(in __file_path) to __objects
        (only if the JSON file (__file_path) exists)"""

        try:
            with open(FileStorage.__file_path, 'r') as f:
                FileStorage.__objects = {}
                temp = json.load(f)
                for key, value in temp.items():
                    class_name, obj_id = key.split('.')
                    class_name = eval(class_name)
                    obj = class_name(**value)
                    FileStorage.__objects[key] = obj
        except FileNotFoundError:
            pass
